#include <SD.h>
#include <WebServer.h>
#include <WiFi.h>
#include <SPI.h>
#include <LoRa.h>
#include <ArduinoJson.h>
#include "FS.h"
#include "SPIFFS.h"

#define SCK     18
#define MISO    19
#define MOSI    23
#define SS      5
#define RST     14
#define DIO0    26

#define LORA_FREQUENCY    433600000
#define LORA_BANDWIDTH    125E3
#define LORA_SPREADING    9
#define LORA_CODING_RATE  5
#define LORA_SYNC_WORD    0x12

#define LED_RECEIVE       2
#define RECEIVE_TIMEOUT   10000
#define PROCESS_INTERVAL_SEC 10
#define INIT_TIMEOUT      5000   // 5 seconds timeout for initialization


const String KNOWN_NODES[] = {"Lora1", "Lora2"};
const int NUM_NODES = sizeof(KNOWN_NODES) / sizeof(KNOWN_NODES[0]);

const char* ssid = "Hospot";
const char* password = "12345678";

const char* ntpServer = "pool.ntp.org";
const long gmtOffset_sec = 7 * 3600;

String latestJsonData = "{}";

struct SensorData {
  float humidity;
  float ds18b20;
  float mq135_raw;
  float ethylene;
  float co2;
  float nh3;
  time_t lastUpdate;
};

SensorData dataNode1;
SensorData dataNode2;

unsigned long lastReceiveTime = 0;
unsigned long lastProcessTimeSec = 0;
bool isLoraInitialized = false;

WebServer server(80);

const float mq135_ethylene_a = 1.0; 
const float mq135_ethylene_b = -0.45;
const float mq135_co2_a = 2.0;
const float mq135_co2_b = -0.42;
const float mq135_ammonia_a = 0.9;
const float mq135_ammonia_b = -0.47;

void handleRoot() {
  server.send(200, "text/html", R"rawliteral(
    <!DOCTYPE html>
    <html lang="id">
    <head>
      <meta charset="UTF-8" />
      <meta name="viewport" content="width=device-width, initial-scale=1" />
      <title>ESP LoRa Dashboard - 2 Charts Side by Side</title>
      <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
      <style>
        body {
          font-family: Arial, sans-serif;
          background-color: #f0f2f5;
          padding: 20px;
          margin: 0;
        }
        h1, h2 {
          text-align: center;
        }
        .node-section {
          max-width: 900px;
          margin: 30px auto;
        }
        .charts-row {
          display: flex;
          gap: 20px;
          justify-content: center;
          flex-wrap: wrap;
        }
        .chart-container {
          background: #fff;
          border-radius: 8px;
          padding: 15px;
          box-shadow: 0 2px 8px rgba(0,0,0,0.1);
          flex: 1 1 400px;
          max-width: 45%;
        }
        canvas {
          width: 100% !important;
          height: 300px !important;
        }
        a.download-link {
          display: block;
          text-align: center;
          margin-top: 20px;
          font-size: 1.1em;
          color: #333;
          text-decoration: none;
          padding: 10px;
        }
        a.download-link:hover {
          text-decoration: underline;
        }
        .button-container {
          display: flex;
          justify-content: center;
          gap: 20px;
          margin-top: 20px;
        }
        .action-button {
          background-color: #f44336;
          color: white;
          border: none;
          padding: 10px 15px;
          text-align: center;
          text-decoration: none;
          display: inline-block;
          font-size: 16px;
          margin: 4px 2px;
          cursor: pointer;
          border-radius: 4px;
        }
        .action-button:hover {
          background-color: #d32f2f;
        }
        .download-container {
          display: flex;
          justify-content: center;
          gap: 20px;
          margin-top: 20px;
        }
      </style>
    </head>
    <body>
      <h1>üì° ESP LoRa Sensor Dashboard</h1>

      <section class="node-section">
        <h2>Lora1</h2>
        <div class="charts-row">
          <div class="chart-container">
            <canvas id="chartLora1Env"></canvas>
          </div>
          <div class="chart-container">
            <canvas id="chartLora1Gas"></canvas>
          </div>
        </div>
      </section>

      <section class="node-section">
        <h2>Lora2</h2>
        <div class="charts-row">
          <div class="chart-container">
            <canvas id="chartLora2Env"></canvas>
          </div>
          <div class="chart-container">
            <canvas id="chartLora2Gas"></canvas>
          </div>
        </div>
      </section>

      <div class="download-container">
        <a href="/download/lora1" class="download-link">üì• Download Lora1 CSV</a>
        <a href="/download/lora2" class="download-link">üì• Download Lora2 CSV</a>
      </div>

      <div class="button-container">
        <button onclick="resetCSV()" class="action-button">Reset CSV Data</button>
      </div>

      <script>
        const chartData = {
          Lora1: { labels: [], humidity: [], temp: [], co2: [], nh3: [], ethylene: [] },
          Lora2: { labels: [], humidity: [], temp: [], co2: [], nh3: [], ethylene: [] }
        };

        function createEnvChart(ctxId, node) {
          const ctx = document.getElementById(ctxId).getContext('2d');
          return new Chart(ctx, {
            type: 'line',
            data: {
              labels: chartData[node].labels,
              datasets: [
                {
                  label: 'Kelembaban (%)',
                  data: chartData[node].humidity,
                  borderColor: 'blue',
                  fill: false
                },
                {
                  label: 'Suhu (¬∞C)',
                  data: chartData[node].temp,
                  borderColor: 'red',
                  fill: false
                }
              ]
            },
            options: {
              responsive: true,
              animation: false,
              scales: {
                y: { beginAtZero: true }
              }
            }
          });
        }

        function createGasChart(ctxId, node) {
          const ctx = document.getElementById(ctxId).getContext('2d');
          return new Chart(ctx, {
            type: 'line',
            data: {
              labels: chartData[node].labels,
              datasets: [
                {
                  label: 'CO‚ÇÇ (ppm)',
                  data: chartData[node].co2,
                  borderColor: 'green',
                  fill: false
                },
                {
                  label: 'NH‚ÇÉ (ppm)',
                  data: chartData[node].nh3,
                  borderColor: 'orange',
                  fill: false
                },
                {
                  label: 'Etilen (ppm)',
                  data: chartData[node].ethylene,
                  borderColor: 'purple',
                  fill: false
                }
              ]
            },
            options: {
              responsive: true,
              animation: false,
              scales: {
                y: { beginAtZero: true }
              }
            }
          });
        }

        const chartLora1Env = createEnvChart('chartLora1Env', 'Lora1');
        const chartLora1Gas = createGasChart('chartLora1Gas', 'Lora1');
        const chartLora2Env = createEnvChart('chartLora2Env', 'Lora2');
        const chartLora2Gas = createGasChart('chartLora2Gas', 'Lora2');

        function updateCharts() {
          fetch('/data')
            .then(res => res.json())
            .then(data => {
              const now = new Date().toLocaleTimeString();

              ['Lora1', 'Lora2'].forEach(node => {
                if (!(node in data)) return;
                const c = chartData[node];

                if (c.labels.length > 20) {
                  c.labels.shift();
                  c.humidity.shift();
                  c.temp.shift();
                  c.co2.shift();
                  c.nh3.shift();
                  c.ethylene.shift();
                }

                c.labels.push(now);
                c.humidity.push(data[node].humidity || 0);
                c.temp.push(data[node].ds18b20 || 0);
                c.co2.push(data[node].co2 || 0);
                c.nh3.push(data[node].nh3 || 0);
                c.ethylene.push(data[node].ethylene || 0);
              });

              chartLora1Env.update();
              chartLora1Gas.update();
              chartLora2Env.update();
              chartLora2Gas.update();
            })
            .catch(err => {
              console.error('Fetch error:', err);
            });
        }

        function resetCSV() {
          if (confirm('Apakah Anda yakin ingin menghapus semua data CSV?')) {
            fetch('/reset-csv', { method: 'POST' })
              .then(response => response.text())
              .then(data => {
                alert(data);
              })
              .catch(error => {
                console.error('Error:', error);
                alert('Terjadi kesalahan saat menghapus data CSV');
              });
          }
        }

        setInterval(updateCharts, 30000); // update tiap 180 detik
        updateCharts();
      </script>
    </body>
    </html>
  )rawliteral");
}

String getFormattedTime() {
  time_t now = time(nullptr);
  struct tm* timeinfo = localtime(&now);
  char buffer[20];
  strftime(buffer, sizeof(buffer), "%Y-%m-%d %H:%M:%S", timeinfo);
  return String(buffer);
}

void saveLogToSD(String nodeId, float humidity, float temperatureDS18B20,
                 float co2, float nh3, float ethylene, bool isValid) {

  String filename = "/" + nodeId + "_log.csv";

  File file = SD.open(filename, FILE_APPEND);
  if (!file) {
    Serial.println("‚ùå Gagal membuka file SD log: " + filename);
    return;
  }

  if (file.size() == 0) {
    file.println("Waktu,Kelembaban (%),Suhu DS18B20 (C),CO2 (ppm),NH3 (ppm),Etilen (ppm),Data Valid");
    Serial.println("‚úÖ File SD log baru dibuat dengan header: " + filename);
  }

  String logLine = getFormattedTime() + "," +
                   String(humidity, 2) + "," +
                   String(temperatureDS18B20, 2) + "," +
                   String(co2, 2) + "," +
                   String(nh3, 2) + "," +
                   String(ethylene, 2) + "," +
                   (isValid ? "Ya" : "Tidak");

  file.println(logLine);
  file.close();
  Serial.println("üìÅ Data berhasil disimpan ke SD: " + filename);
}

void saveLog(String nodeId, float humidity, float temperatureDS18B20,
             float co2, float nh3, float ethylene, bool isValid) {

  String filename = "/" + nodeId + "_log.csv";
  File file = SPIFFS.open(filename, FILE_APPEND);
  if (!file) {
    Serial.println("‚ùå Gagal membuka file log: " + filename);
    return;
  }

  // Tulis header jika file masih kosong
  if (file.size() == 0) {
    file.println("Waktu,Kelembaban (%),Suhu DS18B20 (C),CO2 (ppm),NH3 (ppm),Etilen (ppm),Data Valid");
    Serial.println("‚úÖ File log baru dibuat dengan header: " + filename);
  }

  String logLine = getFormattedTime() + "," +
                   String(humidity, 2) + "," +
                   String(temperatureDS18B20, 2) + "," +
                   String(co2, 2) + "," +
                   String(nh3, 2) + "," +
                   String(ethylene, 2) + "," +
                   (isValid ? "Ya" : "Tidak");

  file.println(logLine);
  file.close();
  Serial.println("üìÅ Data berhasil disimpan ke " + filename);
}

void processPacket(String message, int rssi, float snr) {
  Serial.println("\n--- PACKET RECEIVED ---");
  Serial.println("Data: " + message);

  DynamicJsonDocument doc(512);
  DeserializationError error = deserializeJson(doc, message);

  if (error) {
    Serial.print("JSON parse error: ");
    Serial.println(error.c_str());
    return;
  }

  String nodeId = doc["node"];
  JsonObject dataObj = doc["data"];

  SensorData* nodeData = nullptr;
  if (nodeId == "Lora1") nodeData = &dataNode1;
  else if (nodeId == "Lora2") nodeData = &dataNode2;
  else {
    Serial.println("Unknown node ID: " + nodeId);
    return;
  }

  nodeData->humidity = dataObj["humidity"] | 0.0;
  nodeData->ds18b20 = dataObj["ds18b20"] | 0.0;
  nodeData->mq135_raw = dataObj["mq135_raw"] | 0.0;
  nodeData->co2 = dataObj["co2"] | 0.0;
  nodeData->nh3 = dataObj["nh3"] | 0.0;
  nodeData->ethylene = dataObj["ethylene"] | 0.0;
  nodeData->lastUpdate = time(nullptr);

  Serial.printf("From %s:\n  Hum: %.2f %%\n  DS18B20: %.2f\n  CO2: %.2f ppm\n  NH3: %.2f ppm\n  Ethylene: %.2f ppm\n",
                nodeId.c_str(), nodeData->humidity, nodeData->ds18b20, nodeData->co2, nodeData->nh3, nodeData->ethylene);

  // Update latestJsonData agar bisa diakses via web
  latestJsonData = message;

  // Simpan log ke file CSV yang sesuai dengan nodeId
  saveLog(nodeId, nodeData->humidity, nodeData->ds18b20, nodeData->co2, nodeData->nh3, nodeData->ethylene, true);
  saveLogToSD(nodeId, nodeData->humidity, nodeData->ds18b20, nodeData->co2, nodeData->nh3, nodeData->ethylene, true);  // Tambahkan ini jika ingin simpan ke SD juga
}


void handleData() {
  DynamicJsonDocument doc(512);

  JsonObject lora1 = doc.createNestedObject("Lora1");
  lora1["humidity"] = dataNode1.humidity;
  lora1["ds18b20"] = dataNode1.ds18b20;
  lora1["mq135_raw"] = dataNode1.mq135_raw;
  lora1["co2"] = dataNode1.co2;
  lora1["nh3"] = dataNode1.nh3;
  lora1["ethylene"] = dataNode1.ethylene;

  JsonObject lora2 = doc.createNestedObject("Lora2");
  lora2["humidity"] = dataNode2.humidity;
  lora2["ds18b20"] = dataNode2.ds18b20;
  lora2["mq135_raw"] = dataNode2.mq135_raw;
  lora2["co2"] = dataNode2.co2;
  lora2["nh3"] = dataNode2.nh3;
  lora2["ethylene"] = dataNode2.ethylene;

  String jsonResponse;
  serializeJson(doc, jsonResponse);
  server.send(200, "application/json", jsonResponse);
}

bool initializeLora() {
  Serial.println("Initializing LoRa module...");
  
  // Configure LoRa module
  SPI.begin(SCK, MISO, MOSI, SS);
  LoRa.setPins(SS, RST, DIO0);
  
  // Try to initialize with timeout
  unsigned long startTime = millis();
  while ((millis() - startTime) < INIT_TIMEOUT) {
    if (LoRa.begin(LORA_FREQUENCY)) {
      LoRa.setSpreadingFactor(LORA_SPREADING);
      LoRa.setSignalBandwidth(LORA_BANDWIDTH);
      LoRa.setCodingRate4(LORA_CODING_RATE);
      LoRa.setSyncWord(LORA_SYNC_WORD);
      
      Serial.println("LoRa initialization successful!");
      return true;
    }
    
    Serial.println("Failed to initialize LoRa, retrying...");
    delay(500);
  }
  
  Serial.println("LoRa initialization failed after timeout!");
  return false;
}

float calculateEthylene(int rawValue) {
  return mq135_ethylene_a * pow(rawValue, mq135_ethylene_b);
}

float calculateCO2(int rawValue) {
  return mq135_co2_a * pow(rawValue, mq135_co2_b);
}

float calculateAmmonia(int rawValue) {
  return mq135_ammonia_a * pow(rawValue, mq135_ammonia_b);
}

void handleDownloadCSV(String nodeId) {
  String filename = "/" + nodeId + "_log.csv";
  
  if (!SPIFFS.exists(filename)) {
    // Jika file belum ada, buat file kosong dengan header
    File newFile = SPIFFS.open(filename, FILE_WRITE);
    if (newFile) {
      newFile.println("Waktu,Kelembaban (%),Suhu DS18B20 (C),CO2 (ppm),NH3 (ppm),Etilen (ppm),Data Valid");
      newFile.close();
      Serial.println("‚úÖ File baru dibuat: " + filename);
    } else {
      server.send(500, "text/plain", "Gagal membuat file log");
      return;
    }
  }
  
  File file = SPIFFS.open(filename, "r");
  if (!file) {
    server.send(404, "text/plain", "File tidak ditemukan");
    return;
  }
  
  server.sendHeader("Content-Disposition", "attachment; filename=" + nodeId + "_sensor_log.csv");
  server.streamFile(file, "text/csv");
  file.close();
}

void handleResetCSV() {
  bool success = true;
  
  // Hapus file log untuk setiap node
  for (int i = 0; i < NUM_NODES; i++) {
    String filename = "/" + KNOWN_NODES[i] + "_log.csv";
    if (SPIFFS.exists(filename)) {
      if (!SPIFFS.remove(filename)) {
        success = false;
        Serial.println("‚ùå Gagal menghapus file: " + filename);
      } else {
        Serial.println("‚úÖ File berhasil dihapus: " + filename);
      }
    }
  }
  
  if (success) {
    server.send(200, "text/plain", "Semua data CSV berhasil dihapus");
  } else {
    server.send(500, "text/plain", "Terjadi kesalahan saat menghapus beberapa file CSV");
  }
}

void handleSerialCommands() {
  if (Serial.available()) {
    String command = Serial.readStringUntil('\n');
    command.trim(); // hapus spasi/enter di awal akhir

    if (command == "DELETE LOG") {
      bool deleted = false;
      for (int i = 0; i < NUM_NODES; i++) {
        String filename = "/" + KNOWN_NODES[i] + "_log.csv";
        if (SPIFFS.exists(filename)) {
          SPIFFS.remove(filename);
          Serial.println("‚úÖ " + filename + " berhasil dihapus.");
          deleted = true;
        }
      }
      
      if (!deleted) {
        Serial.println("‚ö†Ô∏è Tidak ada file log yang ditemukan.");
      }
    } else if (command == "FORMAT") {
      if (SPIFFS.format()) {
        Serial.println("‚úÖ SPIFFS berhasil diformat. Semua data terhapus.");
      } else {
        Serial.println("‚ùå Gagal memformat SPIFFS.");
      }
    } else {
      Serial.println("‚ùì Perintah tidak dikenali. Gunakan: DELETE LOG atau FORMAT");
    }
  }
}

void setup() {
  Serial.begin(115200);
  unsigned long startTime = millis();
  while (!Serial && (millis() - startTime) < 3000);
  Serial.println("\n\n=== LoRa Concentrator with Web Dashboard Starting ===");

  // Setup LED
  pinMode(LED_RECEIVE, OUTPUT);
  digitalWrite(LED_RECEIVE, LOW);

  // Initialize LoRa
  isLoraInitialized = initializeLora();
  if (isLoraInitialized) {
    Serial.println("LoRa Concentrator Ready to Receive");
    Serial.println("Frequency: " + String(LORA_FREQUENCY / 1E6) + " MHz");
    Serial.println("Spreading Factor: SF" + String(LORA_SPREADING));
    Serial.println("Bandwidth: " + String(LORA_BANDWIDTH / 1E3) + " kHz");
    Serial.println("Coding Rate: 4/" + String(LORA_CODING_RATE));
  } else {
    Serial.println("Failed to initialize LoRa. Please check connections and restart.");
  }

  // ==== CONNECT TO WIFI ====
  Serial.print("Connecting to WiFi");
  WiFi.begin(ssid, password);

  startTime = millis();
  while (WiFi.status() != WL_CONNECTED && (millis() - startTime) < 20000) {
    delay(500);
    Serial.print(".");
  }

  if (WiFi.status() == WL_CONNECTED) {
    Serial.println("\n‚úÖ WiFi connected!");
    Serial.print("üì∂ IP Address: ");
    Serial.println(WiFi.localIP());

    // NTP time sync
    configTime(gmtOffset_sec, 0, ntpServer);

    // Start web server
    server.begin();
    server.on("/", handleRoot);
    server.on("/data", handleData);
    server.on("/download/lora1", []() {
      handleDownloadCSV("Lora1");
    });
    server.on("/download/lora2", []() {
      handleDownloadCSV("Lora2");
    });
    server.on("/reset-csv", HTTP_POST, handleResetCSV);
    
    Serial.println("üåê Web server started. Access via browser at: http://" + WiFi.localIP().toString());
  } else {
    Serial.println("\n‚ùå WiFi connection failed!");
  }

  // ==== MOUNT SPIFFS ====
  if (!SPIFFS.begin(true)) {
    Serial.println("Failed to mount SPIFFS!");
    return;
  } else {
    Serial.println("SPIFFS mounted successfully.");
  }
  if (!SD.begin(5)) {  // Ganti '5' jika CS pin SD card kamu berbeda
  Serial.println("‚ùå Gagal inisialisasi SD Card!");
} else {
  Serial.println("‚úÖ SD Card berhasil diinisialisasi.");
}
}

void loop() {
  // Handle web server clients
  server.handleClient();
  handleSerialCommands();
  int packetSize = LoRa.parsePacket();
  if (packetSize) {
    // Visual indicator
    digitalWrite(LED_RECEIVE, HIGH);

    String incoming = "";
    while (LoRa.available()) {
      incoming += (char)LoRa.read();
    }

    incoming.trim(); // Remove whitespace and newlines

    if (incoming.length() == 0) {
      Serial.println("‚ö†Ô∏è Received empty packet. Ignoring.");
      digitalWrite(LED_RECEIVE, LOW);
      return;
    }
    // Get signal quality metrics
    int rssi = LoRa.packetRssi();
    float snr = LoRa.packetSnr();

    // Time control in seconds
    unsigned long currentTimeSec = millis() / 1000;
    if (currentTimeSec - lastProcessTimeSec >= PROCESS_INTERVAL_SEC) {
      processPacket(incoming, rssi, snr);
      lastProcessTimeSec = currentTimeSec;
    } else {
      Serial.println("Data diterima, tapi belum 30 detik. Diabaikan.");
    }

    // Update last receive time
    lastReceiveTime = millis();

    // Turn off LED after processing
    digitalWrite(LED_RECEIVE, LOW);
  }

  // Optional: timeout check
  if (millis() - lastReceiveTime > RECEIVE_TIMEOUT && lastReceiveTime > 0) {
    Serial.println("No packets received for " + String(RECEIVE_TIMEOUT / 1000) + " seconds");
    lastReceiveTime = millis(); // Reset to avoid repeated messages
  }
  delay(10);
  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("WiFi disconnected. Trying to reconnect...");
    WiFi.disconnect();
    WiFi.begin(ssid, password);
    delay(1000); // beri waktu koneksi
  }
}
